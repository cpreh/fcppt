/**
\page older_changes Older Changes

\section changes_changes_to_150 Changes from 1.4.0 to 1.5.0

\subsection changes_added_functionality_to_150 Added functionality

<ul>

<li>\ref fcpptalgorithm
	<ul>
	<li>Added #fcppt::algorithm::find_opt.</li>
	<li>Added #fcppt::algorithm::index_of and
	<code>%fcppt::algorithm::index_of_enum_array</code>.</li>
	</ul>
</li>

<li>\ref fcpptoptional
	<ul>
	<li>Added <code>%fcppt::optional_deref</code> which returns the
	dereferenced contents of the optional iff it is not empty. This is
	often useful when optionals contain iterators or unique pointers.</li>
	</ul>
</li>

<li>\ref fcpptvarious
	<ul>
	<li>Added #fcppt::function which is a wrapper around
	<code>%std::function</code> that cannot be null and has an explicit
	constructor.</li>
	</ul>
</li>

</ul>

\subsection changes_changed_functionality_to_150 Changed functionality

<ul>

<li>\ref fcpptalgorithm
	<ul>
	<li>Let #fcppt::algorithm::find_if_opt return an optional
	iterator to make it more consistent with the other similar
	algorithms.</li>
	</ul>
</li>

<li>\ref fcpptlog
	<ul>
	<li>Use #fcppt::function for #fcppt::log::format::function.</li>
	<li>Introduced #fcppt::log::format::optional_function to
	make it clear where a function can be missing.</li>
	<li>Changed #fcppt::log::parameters to only consist of a
	single class.</li>
	</ul>
</li>

<li>\ref fcpptsignal
	<ul>
	<li>Use #fcppt::function instead of
	<code>%std::function</code>.</li>
	<li>Use a strong typedef for the initial value of a signal.</li>
	</ul>
</li>

</ul>

\subsection changes_bugfixes_to_150 Bugfixes

<ul>

<li>\ref fcpptsmartptr
	<ul>
	<li>Readded #FCPPT_ASSERT_COMPLETE to #fcppt::default_deleter.</li>
	</ul>
</li>

<li>Add a missing <code>;</code> for <code>boost-1.59</code> in
<code>test/io/read_write.cpp</code>.</li>

</ul>

\section changes_changes_to_140 Changes from 1.3.0 to 1.4.0

\subsection changes_general_to_140 General changes

<ul>
<li>At least <code>CMake-3.0</code> is now required.</li>
<li>Fixed upcoming <code>clang-3.7</code> warnings when <code>std::move</code>
can be omitted from <code>return</code> statements.</li>
</ul>

\subsection changes_added_functionality_to_140 Added functionality

<ul>

<li>\ref fcpptalgorithm
	<ul>
	<li>Added <code>fcppt::algorithm::set_difference</code>.</li>
	<li>Added #fcppt::algorithm::all_of.</li>
	<li>Improve <code>reserve</code> optimization in #fcppt::algorithm::map
	by either using <code>%end() - %begin()</code> or <code>%size()</code> of the source range.</li>
	</ul>
</li>

<li>\ref fcpptcasts
	<ul>
	<li>Added #fcppt::cast::to_void_ptr.</li>
	</ul>
</li>

<li>\ref fcpptcontainer
	<ul>
	<li>Added #fcppt::container::maybe_front.</li>
	<li>Added #fcppt::container::maybe_back.</li>
	<li>Added <code>noexcept</code> to move constructors and assignment
	operators of <code>fcppt::container::raw_vector</code>, #fcppt::container::tree::object and #fcppt::container::grid::object.
	</li>
	<li>Added #fcppt::container::grid::at_optional.</li>
	<li>Added #fcppt::container::at_optional.</li>
	<li>Added #fcppt::container::grid::pos_range which is just
	a range over positions without a grid object.</li>
	<li>Added <code>%size</code> function to #fcppt::container::grid::pos_ref_range.</li>
	<li>Removed default constructor of #fcppt::container::tree::object.</li>
	</ul>
</li>

<li>\ref fcpptconfig
	<ul>
	<li>Ignore clang's <code>-Wunused-local-typedef</code> in external
	headers.  </li>
	</ul>
</li>

<li>\ref fcpptenum
	<ul>
	<lI>Added <code>%size</code> function to
	<code>fcppt::enum_range</code>.</li>
	</ul>
</li>

<li>\ref fcpptmath
	<ul>
	<li>Added <code>fcppt::math::at_c</code> that accesses a container
	using an integral constant as index.</li>
	<li>Added #fcppt::math::interval_distance.</li>
	<li>Added #fcppt::math::box::distance.</li>
	<li>Added #fcppt::math::vector::init,
	fcppt::math::box::init and #fcppt::math::dim::init
	.</li>
	<li>Added #fcppt::math::vector::map and #fcppt::math::dim::map.</li>
	</ul>
</li>

<li>\ref fcpptoptional
	<ul>
	<li>Added <code>noexcept</code> to the move constructor and assignment
	operator.</li>
	<li> Added <code>%fcppt::optional_assign</code> which assigns to an
	optional but returns the reference to the optional's content.
	</li>
	<li>Added <code>%fcppt::optional_from_pointer</code>.</li>
	<li>Added <code>%fcppt::optional_alternative</code>.</li>
	</ul>
</li>

<li>\ref fcpptrandom
	<ul>
	<li>Added #fcppt::random::wrapper::uniform_container which
	returns elements from a container using a uniform distribution.
	</li>
	<li>Added <code>SeedSeq</code> constructor to random number generators.</li>
	</ul>
</li>

<li>\ref fcpptsmartptr
	<ul>
	<li>Added #fcppt::unique_ptr which doesn't provide a
	default constructor and is not supposed to hold a <code>nullptr</code>.</li>
	<li>Added #fcppt::unique_ptr_to_base and #fcppt::unique_ptr_to_const.</li>
	<li>Added #fcppt::default_deleter.</li>
	</ul>
</li>

<li>\ref fcppttypeiso
	<ul>
	<li>New library that has been extracted from \ref fcpptrandom. It can
	recursively pack and unpack types like strong typedefs, boost units,
	enums, and more.</li>
	</ul>
</li>

<li>\ref fcppttypetraits
	<ul>
	<li>Added
	<code>fcppt::type_traits::function_pointer_to_reference</code>.</li>
	</ul>
</li>

<li>\ref fcpptvariant
	<ul>
	<li>Added #fcppt::variant::match  function which often
	makes code more readable that otherwise would have been written using a
	unary visitation.</li>
	<li>Added <code>noexcept</code> to the move constructor and assignment
	operator.</li>
	</ul>
</li>

<li>\ref fcpptvarious
	<ul>
	<li>Added <code>fcppt::make_homogenous_pair</code>.</li>
	<li>Added <code>%size</code> function to #fcppt::int_range.</li>
	<li>Added #fcppt::tag.</li>
	</ul>
</li>

</ul>

\subsection changes_changed_functionality_to_140 Changed functionality

<ul>

<li>FcpptCMakeUtils
	<ul>
	<li>Set <code>CMAKE_{RUNTIME,LIBRARY_ARCHIVE}_OUTPUT_DIRECTORY</code> instead
	of their deprecated versions.</li>
	</ul>
</li>

<li>\ref fcpptalgorithm
	<ul>
	<li><code>fcppt::algorithm::join</code> and
	<code>fcppt::algorithm::join_move</code> have been merged.</li>
	<li>#fcppt::algorithm::map_concat and
	<code>fcppt::algorithm::map_concat_move</code> have been merged.</li>
	</ul>
</li>

<li>\ref fcpptcontainer
	<ul>
	<li>Use <code>emplace</code> instead of <code>insert</code> in
	#fcppt::container::get_or_insert.</li>
	<li>Changed the constructors of #fcppt::container::grid::object. Instead of the unsafe range
	and iterator constructors, there is now a constructor that calls a
	function for every position that must be initialized.</li>
	<li>Renamed <code>%fcppt::container::grid::pos_range</code> to
	#fcppt::container::grid::pos_ref_range.</li>
	<li>#fcppt::container::grid::object uses #fcppt::no_init to make it more clear when elements might not be
	initialized.</li>
	<li>fcppt::container::grid::is_square now takes a dimension instead of
	a grid object.</li>
	</ul>
</li>

<li>\ref fcpptliteral
	<ul>
	<li>Boost Units literals are now dimensionless.</li>
	</ul>
</li>

<li>\ref fcpptmath
	<ul>
	<li>Moved #fcppt::math::box::object  comparison operators
	to <code>fcppt/math/box/comparison.hpp</code>.</li>
	<li>Removed default constructor of #fcppt::math::matrix::object.</li>
	</ul>
</li>

<li><code>fcpptmpl</code>
	<ul>
	<li>Changed <code>fcppt::mpl::for_each</code> and
	<code>fcppt::mpl::invoke_on</code> to use #fcppt::tag to call
	its function.</li>
	</ul>
</li>

<li>\ref fcpptsmartptr
	<ul>
	<li>Removed default constructor of #fcppt::shared_ptr.</li>
	<li>#fcppt::weak_ptr::lock now returns an optional shared
	ptr.</li>
	</ul>
</li>

<li>\ref fcpptrandom
	<ul>
	<li><code>fcppt::random::distribution::parameters::make_uniform_indices</code>
	now returns an optional distribution. This covers the case in which the
	container is empty.</li>
	</ul>
</li>

<li>\ref fcpptstrongtypedef
	<ul>
	<li>Removed <code>fcppt/strong_typedef_input.hpp</code> and
	<code>fcppt/strong_typedef_output.hpp</code> from
	<code>fcppt/strong_typedef.hpp</code>.</li>
	</ul>
</li>

<li>\ref fcpptvariant
	<ul>
	<li>The constructor of #fcppt::variant::object is now
	<code>explicit</code>.</li>
	</ul>
</li>

</ul>

\subsection changes_bugfixes_to_140 Bugfixes

<ul>
<li>Use standard iterator categories instead of boost iterator categories. The
latter do not derive from the former and generally break algorithms that test
for them.</li>
<li>Fix <code>std::swap</code> includes to conform to <code>C++11</code>.</li>
</ul>
\section changes_changes_to_130 Changes from 1.2.0 to 1.3.0

\subsection changes_general_to_130 General changes

<ul>
<li>Ignore <code>-Wdeprecated-declarations</code> in external headers.</li>
</ul>

\subsection changes_added_functionality_to_130 Added functionality

<ul>
<li>\ref fcpptalgorithm
	<ul>
	<li>Most algorithms (for example #fcppt::algorithm::map and #fcppt::algorithm::fold ) have been extended to allow nonconst lvalue and rvalue ranges.</li>
	</ul>
</li>

<li>\ref fcpptassert
	<ul>
	<li>Added <code>FCPPT_ASSERT_OPTIONAL_ERROR</code>  which first
	asserts that an optional is set and then evaluates to its
	contents.</li>
	</ul>
</li>

<li>\ref fcpptcontainer
	<ul>
	<li>Added #fcppt::container::get_or_insert_with_result  which returns if the
	element was inserted.</li>
	<li>Added #fcppt::container::find_opt_iterator  which returns an optional
	iterator instead of an optional reference.</li>
	<li>Added #fcppt::container::to_reference_type, #fcppt::container::to_iterator_type,
	#fcppt::container::to_pointer_type and #fcppt::container::to_mapped_type.
	</ul>
</li>

<li>\ref fcpptoptional
	<ul>
	<li>Most functions operating on optionals have been extended to accept
	nonconst lvalues and rvalues.</li>
	<li>Added <code>%fcppt::forward_optional_get</code> which can be used
	to forward the contents of an optional if the optional itself is an
	rvalue.</li>
	<li>Added <code>%fcppt::optional_combine</code> which either chooses
	one of two optionals or combines both.</li>
	<li>Added output operator to optional.</li>
	<li>Added <code>%fcppt::maybe_multi</code> and <code>%fcppt::maybe_void_multi</code>
	which accept multiple optionals.</li>
	</ul>
</li>

<li>\ref fcpptvarious
	<ul>
	<li>Added #fcppt::const_  which is the const
	function.</li>
	<li>Added #fcppt::identity  which is the identity
	function.</li>
	<li>Added #fcppt::move_if_rvalue  which is similar to
	<code>std::foward</code> but works on two types.</li>
	<li>Added #fcppt::absurd  which is the polymorphic
	terminate function.</li>
	</ul>
</li>

<li>\ref fcpptvariant
	<ul>
	<li>Added #fcppt::variant::to_optional  which can be used
	to query the variant for a specific type.</li>
	</ul>
</li>

</ul>

\subsection changes_changed_functionality_to_130 Changed functionality

<ul>
<li>\ref fcpptoptional
	<ul>
	<li>Removed pointer semantics from optional. See \ref optional_design for a
	detailed explanation.</li>

	<li>Also removed <code>reset</code> and assignment of non-lifted values to
	optionals.</li>

	<li>Optionals that have been moved from are now always empty.</li>
	</ul>
</li>
<li>\ref fcpptvariant
	<ul>
	<li><code>get</code> has been renamed to <code>get_exn</code>.
	</ul>
</li>

<li>CMake export names are now used properly. The <code>prepare_config</code>
function is no longer needed and has been removed.</li>
</ul>
\section changes_changes_to_120 Changes from 1.1.0 to 1.2.0

\subsection changes_general_to_120 General changes

<ul>

<li>Ignore VC++ warnings about implicitly deleted move ctors and assignment
operators in external headers. This goes towards supporting VC++ again, but the
2015 preview still has issues with noexcept.</li>

</ul>

\subsection changes_added_functionality_to_120 Added functionality

<ul>

<li>Added #fcppt::algorithm::find_by_opt  and <code>%fcppt::algorithm::find_by_exn</code>.</li>

<li>Added <code>%fcppt::optional_to_exception</code>.</li>

<li>Added element_type typedef to <code>%fcppt::optional</code>.</li>

</ul>

\subsection changes_changed_functionality_to_120 Changed functionality

<ul>

<li>Changed fcppt::algorithm::array_fold_static and
fcppt::algorithm::enum_array_fold_static to take function objects that are
callable with one parameter instead of zero parameters. This also goes towards
supporting VC++ again.</li>

<li>Require cast functions from \ref fcpptcasts in fcppt::strong_typedef_construct_cast
and <code>fcppt::mpl::integral_cast</code>.</li>

</ul>

\subsection changes_removed_from_libraries_to_120 Removed functionality

<ul>

<li>Removed fcppt::io::color which had a very questionable implementation.</li>

<li>Removed fcppt::algorithm::copy_n. Use std::copy_n instead.</li>

<li>Removed fcppt::math::is_rational which was unused.</li>

<li>Removed fcppt::number_multiplexer which was undocumented.</li>

<li>Removed fcppt::time::sleep. Use std::this_thread::sleep_for instead.</li>

</ul>

\subsection changes_bugfixes_to_120 Bugfixes

<ul>

<li>Fixed cmake-3.1.1 warnings about quoting in if statements.</li>

<li>Fixed structure_cast functions in math to actually use their conversion
functions instead of static_cast.</li>

<li>Int ranges where end < begin are now empty.</li>

</ul>

\section changes_changes_to_110 Changes from 1.0.0 to 1.1.0

\subsection changes_general_to_110 General changes

<ul>

<li>enable_ifs that checked for type constraints were replaced by
static_asserts.</li>

</ul>

\subsection changes_added_functionality_to_110 Added functionality

<ul>

<li>Added FCPPT_DONT_EXPORT option to cmake. This option is useful if modules
are found via add_subdirectory.</li>

<li>\ref fcpptcasts
	<ul>
	<li>Added function objects of some casts to fcppt.cast.</li>
	</ul>
</li>

<li>\ref fcpptconfig
	<ul>
	<li>Added #FCPPT_CONFIG_CLANG_VERSION_AT_LEAST and #FCPPT_CONFIG_GCC_VERSION_AT_LEAST.</li>

	<li>Ignore float conversion and inconsistent override warnings in
	external headers.</li>
	</ul>
</li>

<li>\ref fcpptmath
	<ul>
	<li>Added fcppt::math::vector::to_unsigned,
	fcppt::math::vector::to_signed and fcppt::math::vector::to_dim. Similar
	functions were added to fcppt::math::dim.</li>
	</ul>
</ul>

\subsection changes_changed_functionality_to_110 Changed functionality

<ul>

<li>Changed fcppt::algorithm::find_exn and fcppt::algorithm::find_if_exn to
take the exception as a parameter.</li>

<li>Changed structure_cast functions of fcppt::math to require a cast function
as template parameter.</li>

<li>Forward headers were added to vector/static.hpp, dim/static.hpp,
matrix/static.hpp, sphere/circle.hpp and box/rect.hpp.</li>

</ul>

\subsection changes_removed_from_libraries_to_110 Removed functionality

<ul>

<li>Removed array_hash which was a duplicate of fcppt::range_hash.</li>

<li>Removed fcppt::math::vector::slerp.</lI>

<li>Removed fcppt::algorithm::exception and fcppt::algorithm::element_not_found.</li>

</ul>

\subsection changes_bugfixes_to_110 Bugfixes

<ul>

<li>Added missing ${} for cmake-3.1 in fcppt_utils_handle_so_version.</li>

<li>Added const_iterator typedef to fcppt::container::tree::pre_order.</li>

</ul>

\section changes_changes_to_100 Changes from 0.12.0 to 1.0.0

\subsection changaes_general_to_100 General changes

<ul>

<li>fcppt now uses C++11 which implies that non-conforming compilers are no
longer supported.</li>

</ul>

\subsection changes_new_libraries_to_100 New Libraries

<ul>

<li>\ref fcpptcasts
	<ul>

	<li>Added fcppt.casts which includes casts to replace <code>static_cast</code>.</li>

	</ul>
</li>

<li>\ref fcpptenum
	<ul>

	<li>Added fcppt::enum_max_value, fcppt::enum_size and
	fcppt::cast_to_enum.</li>

	<li>Added fcppt::container::enum_array.</li>

	<li>Added fcppt::enum_range.</li>

	<li>Added fcppt::runtime_enum.</li>

	<li>Added fcppt::algorithm::enum_array_fold and
	fcppt::algorithm::enum_array_fold_static.</li>

	</ul>
</li>

<li>\ref fcpptliteral
	<ul>

	<li>Added fcppt::literal.</li>

	</ul>
</li>

<li>\ref fcpptref
	<ul>

	<li>Added fcppt::reference_wrapper which supports incomplete types.</li>

	</ul>
</li>

</ul>

\subsection changes_added_functionality_to_100 Added functionality

<ul>

<li>CMake
	<ul>

	<li>Allow to externally modify fcppt's .so version.</li>

	</ul>
</li>

<li>\ref fcpptalgorithm
	<ul>

	<li>Added fcppt::algorithm::map_concat and
	fcppt::algorithm::map_concat_move.</li>

	<li>Added fcppt::algorithm::array_push_back.</li>

	<li>Added fcppt::algorithm::find_if_exn for ranges.</li>

	<li>Added fcppt::algorithm::fold for ranges.</li>

	<li>Added fcppt::algorithm::repeat.</li>

	<li>Added fcppt::algorithm::map_optional.</li>

	<li>Added fcppt::algorithm::join_move.</li>

	<li>Added fcppt::algorithm::map_iteration.</li>

	<li>Added fcppt::algorithm::sequence_iteration.</li>

	<li>Added fcppt::algorithm::array_fold and
	fcppt::algorithm::array_fold_static.</li>

	<li>Added fcppt::algorithm::array_init and
	fcppt::algorithm::array_init_move.</li>

	<li>Added fcppt::algorithm::find_if_opt.</li>

	</ul>
</li>

<li>fcpptassign
	<ul>

	<li>Added fcppt::assign::make_container_opt.</li>

	</ul>
</li>

<li>\ref fcpptcontainer
	<ul>

	<li>fcppt::container::raw_vector is now movable.</li>

	<li>Added initializer list constructor to fcppt::container::raw_vector.</li>

	<li>Added fcppt::container::find_exn.</li>

	<li>Added fcppt::container::find_opt.</li>

	<li>Added fcppt::container::array_hash.</li>

	<li>Added fcppt::container::get_or_insert.</li>

	</ul>
</li>

<li>\ref fcpptcontainerbitfield
	<ul>

	<li>Added fcppt::container::bitfield::underlying_value.</li>

	<li>Added array constructor to fcppt::container::bitfield::object.</li>

	<li>Added initializer list constructors to
	fcppt::container::bitfield::object.</li>

	<li>Added hash to fcppt::container::bitfield::object.</li>

	</ul>
</li>


<li>\ref fcpptcontainergrid
	<ul>

	<li>Added range constructor for fcppt::container::grid::object.</li>

	<li>fcppt::container::grid::object is now movable.</li>

	<li>Added fcppt::container::grid::pos.</li>

	<li>Added fcppt::container::grid::clamp_pos and fcppt::container::grid::clamp_signed_pos.</li>

	<li>Added fcppt::container::grid::neumann_neighbors.</li>

	<li>Added fcppt::container::grid::in_range_dim.</li>

	<li>Added fcppt::container::grid::moore_neighbors.</li>

	<li>Added fcppt::container::grid::spiral_iterator.</li>

	</ul>
</li>

<li>\ref fcpptcontainertree
	<ul>

	<li>fcppt::container::tree::object is now movable.</li>

	<li>Added fcppt::container::tree::map.</li>

	<li>Added fcppt::container::tree::level.</li>

	</ul>
</li>

<li>\ref fcpptfilesystem
	<ul>

	<li>Added fcppt::filesystem::num_subpaths.</li>

	<li>Added fcppt::filesystem::strip_prefix.</li>

	<li>Added fcppt::filesystem::normalize.</li>

	</ul>
</li>

<li>\ref fcpptio
	<ul>

	<li>Added fcppt::io::scoped_rdbuf.</li>

	</ul>
</li>

<li>\ref fcpptlog
	<ul>

	<li>Added FCPPT_LOG_DEFINE_OBJECT.</li>

	<li>Added fcppt::log::activate_levels_recursive.</li>

	<li>Added fcppt::log::deactivate_levels_recursive.</li>

	<li>Added fcppt::log::context::transfer_to.</li>

	<li>Added fcppt::log::new_sink.</li>

	<li>Added fcppt::log::print_all_locations.</li>

	</ul>
</li>

<li>\ref fcpptmath
	<ul>

	<li>Math operations are asymmetric now (e.g. multiplying a vector of
	meters by a vector of seconds).</li>

	<li>Added fcppt::math::ceil_div_signed.</li>

	<li>Added hashing function to fcppt::math::vector::object,
	fcppt::math::dim::object and fcppt::math::matrix::object.</li>

	<li>Added fcppt::math::vector::distance.</li>

	<li>Added fcppt::math::bresenham and fcppt::math::bresenham_thick.</li>

	<li>Added scalar addition, subtraction and modulus to
	fcppt::math::vector::object and fcppt::math::dim::object.</li>

	</ul>
</li>

<li><code>fcpptmpl</code>
	<ul>

	<li>Generalized <code>fcppt::mpl::invoke_on</code> by adding <code>fcppt::mpl::runtime_index</code>.</li>

	</ul>
</li>

<li>\ref fcpptoptional
	<ul>

	<li>fcppt::optional is now movable.</li>

	<li>Added fcppt::optional_ref_compare.</li>

	<li>Added fcppt::optional_string typedef.</li>

	<li>Added operator< to fcppt::optional.</li>

	<li>Added fcppt::optional_bind.</li>

	<li>Added fcppt::optional_bind_construct.</li>

	<li>Added fcppt::from_optional.</li>

	<li>Added fcppt::maybe and fcppt::maybe_void.</li>

	</ul>
</li>

<li>\ref fcpptrandom
	<ul>

	<li>Random has been improved to allow other types in distributions
	(e.g. strong typedefs).</li>

	<li>Added fcppt::random::make_variate.</li>

	<li>Added fcppt::random::distribution::parameters::make_uniform_indices.</li>

	<li>Added fcppt::random::generator::mt19937.</li>

	<li>Added constructor to fcppt::random::variate which takes the
	parameters of the distribution.</li>

	</ul>
</li>

<li>\ref fcpptsignal
	<ul>

	<li>fcppt::signal::object is now movable.</li>

	</ul>
</li>

<li>\ref fcpptstrongtypedef
	<ul>

	<li>fcppt::strong_typedef is now movable.</li>

	</ul>
</li>

<li>\ref fcpptvariant
	<ul>

	<li>fcppt::variant::object is now movable.</li>

	<li>Added fcppt::variant::compare.</li>

	<li>Added operator< for fcppt::variant::object.</li>

	</ul>
</li>

<li>\ref fcpptvarious
	<ul>

	<li>Added fcppt::range_hash.</li>

	<li>Added fcppt::int_range that also works with strong typedefs.</li>

	</ul>
</li>


</ul>

\subsection changes_changed_functionality_to_100 Changed functionality

<ul>

<li>General
	<ul>

	<li>Remove consts on return types that have move constructors.</li>

	<li>Added override to all overriding functions.</li>

	</ul>
</li>

<li>\ref fcpptalgorithm
	<ul>

	<li>fcppt::algorithm::map now also works with movable types.</li>

	<li>Improved fcppt::algorithm::map by reserving the result's size, if
	possible.</li>

	<li>Allow multi argument fcppt::algorithm::join.</li>

	</ul>
</li>

<li>fcpptassign
	<ul>

	<li>fcppt.assign is now move only. Use initializer lists for all other
	cases.</li>

	</ul>
</li>

<li>\ref fcpptcasts
	<ul>

	<li>Moved most cast functions to the cast namespace.</li>

	</ul>
</li>

<li>\ref fcpptcontainergrid
	<ul>

	<li>Allow fcppt::container::grid::resize_preserve_init to be used with
	types without a default constructor.</li>

	</ul>
</li>

<li>\ref fcpptcontainertree
	<ul>

	<li>fcppt::container::tree::object stores its children move efficiently
	by not using unique_ptr anymore.</li>

	</ul>
</li>

<li>\ref fcpptlog
	<ul>

	<li>fcppt::log::level_stream is now copyable.</li>

	<li>fcppt.log headers have been split to conform to the include what
	you use style.</li>

	<li>fcppt.log is now a distinct library.</li>

	</ul>
</li>

<li>\ref fcpptmath
	<ul>

	<li>Use template aliases for math types.</li>

	<li>Changed fcppt::math::vector::fill and fcppt::math::dim::fill to
	take the vector or dim as template argument.</li>

	</ul>
</li>

<li> \ref fcpptsignal
	<ul>

	<li>fcppt::signal::connection is now inline, making fcppt.signal
	header-only.</li>

	</ul>
</li>

</ul>

\subsection changes_removed_from_libraries_to_100 Removed functionality

<ul>

<li>Features made obsolete by C++11
	<ul>

	<li>Removed SAFE_BOOL which can be replaced by explicit conversion
	operators.</li>

	<li>Removed fcppt::assign::make_array which can be replaced by
	initializer lists.</li>

	<li>Removed fcppt::signal::connection_manager which can be replaced by
	fcppt::signal::connection_container.</li>

	<li>Removed fcppt::scoped_ptr<T> which can be replaced by
	<code>std::unique_ptr<T> const</code>.</li>

	<li>Removed fcppt::make_auto_ptr.</li>

	<li>Removed fcppt.alignment which is replaced by alignas and
	alignof.</li>

	<li>Removed fcppt::container::array. Use std::array instead.</li>

	<li>Removed fcppt::type_info which is replaced by
	<code>std::type_index</code>.</li>

	<li>Removed workarounds.hpp which applied to pre-C++-11 compilers
	only.</li>

	<li>Removed fcppt::container::ptr functions and
	fcppt::algorithm::ptr_container_ease and
	fcppt::algorithm::ptr_container_erase_if. Ptr containers should be
	replaced by containers of unique ptrs.</li>

	</ul>
</li>

<li>Others
	<ul>

	<li>Removed fcppt::variant::recursive. Recursive variants are inefficient.</li>

	<li>Removed fcppt.chrono.asio. Asio now supports std::chrono durations and time
	points.</li>

	<li>Removed dynamic math classes that we didn't have a usecase for.</li>

	<li>Removed fcppt::algorithm::copy_if. fcppt::algorithm::map_optional can be
	used instead.</li>

	<li>Removed fcppt::container::map which was incomplete and never
	documented.</li>

	<li>Removed fcppt::log::global which was unused.</li>

	<li>Removed FOREACH_ENUMERATOR. Use fcppt::make_enum_range instead.</li>

	<li>Removed FCPPT_TRY_DYNAMIC_CAST. Use fcppt::cast::try_dynamic instead.</li>

	<li>Removed fcppt::math::quaterion which was unused.</li>

	</ul>
</li>

</ul>

\subsection changes_bugfixes_to_100 Bugfixes

<ul>

<li>CMake
	<ul>

	<li>Fix cmake paths so that fcppt can be used via
	add_subdirectory.</li>

	<li>Fixed linking to Boost found by testing on Fedora.</li>

	<li>Fixed FcpptCMakeUtils to not set anything globally.</li>

	</ul>
</li>

<li>\ref fcpptmath
	<ul>

	<li>Fixed comparison of different math objects (e.g. a vector and a vector view).</li>

	</ul>
</li>

<li>\ref fcpptoptional
	<ul>

	<li>Fixed a bug in fcppt::optional::operator=.</li>

	</ul>
</li>

<li>\ref fcpptvariant
	<ul>

	<li>Fixed fcppt::variant::object::operator= when construction
	throws.</li>

	</ul>
</li>

</ul>
\section changes_changes_to_012 Changes from 0.11.1 to 0.12.0

\subsection changaes_general_to_012 General changes

<ul>

<li>Expose cmake targets from the build directory and when installing. This
should make it a lot easier to use fcppt from other cmake based projects. See
\ref installation_usage_using_fcppt </li>

<li>Some updates for VC++11, mostly warning fixes.</li>

<li>Some updates for gcc-4.8 trunk, also mostly warning fixes.</li>

</ul>

\subsection changes_added_functionality_to_012 Added functionality

<ul>

<li>Automatically set <code>CMAKE_INSTALL_LIBDIR</code> which some
distributions set to handle multilib.</li>

<li>Expose fcppt::math::is_static_storage</li>

<li>Added fcppt::math::box::expand and fcppt::math::box::shrink</li>

<li>Added fcppt::math::box::extend_bounding_box</li>

<li>Added fcppt::container::tree::depth</li>

<li>Added fcppt::algorithm::join to join two containers into a new one</li>

<li>Added typedefs for <code>N</code> and <code>M</code> template parameters
for matrix</li>

<li>Added fcppt::assign::make_map as a convenience wrapper for
fcppt::assign::make_container so that you don't have to call
<code>std::make_pair</code></li>

<li>Added <code>fcppt::mpl::all_of</code></li>

<li>Added fcppt::math::step</li>

<li>Added fcppt::math::matrix::transform_point and fcppt::math::matrix::transform_direction to multiply a 4x4 matrix by a 3-dimensinal point or direction vector, respectively.</li>

<li>Added fcppt::math::matrix::exponential_pade to calculate the exponential of a matrix using the Pade algorithm.</li>

<li>Added fcppt::math::matrix::logarithm to calculate the logarithm of a matrix.</li>

</ul>

\subsection changes_removed_from_libraries_to_012 Removed functionality

<ul>

<li>Removed <code>include_windows.hpp</code> from public includes</li>

<li>Removed <code>fcppt.thread</code>. The purpose of <code>fcppt.thread</code>
was to provide sleeping with a steady clock and to call terminate on joinable
threads upon destruction. Both issues have been fixed in
<code>Boost.Thread</code> as of <code>boost-1.52.0</code></li>

</ul>

\subsection changes_bugfixes_to_012 Bugfixes

<ul>

<li>Fixed a bug in fcppt::unique_ptr::reset </li>

<li>Fixed assigning of math views (like matrix's row view)</li>

<li>Reduced smart pointer include dependencies</li>

<li>Don't use <code>-pthread</code> if not necessary</li>

<li>Prefer newer boost versions over older ones. We also don't set
<code>Boost_ADDITIONAL_VERSIONS</code> anymore.</li>

</ul>

\section changes_changes_to_011_1 Changes from 0.11 to 0.11.1

This release is mainly a bugfix release.

<ul>

<li>Some documentation fixes.</li>

<li>fcppt::algorithm::levenshtein and fcppt::algorithm::shortest_levenshtein
now support boost.range and not only containers.</li>

<li>Added FCPPT_PP_CONST, FCPPT_PP_PURE and FCPPT_PP_WARN_UNUSED_RESULT.</li>

<li>Added missing template keywords for clang-3.1</li>

<li>Added fcppt::math::interpolation::perlin_fifth_degree function (along with
the corresponding functor) which implements Ken Perlin's noise interpolation
function.</li>

<li>Added fcppt::container::bitfield::object::get and
fcppt::container::bitfield::object::static_size for easy integration into
other APIs.</li>

<li>Ignore <code>-Wextra-semi</code> in Boost headers for clang-3.2 trunk</li>

<li>Fixed type problems in bitfield. The size type is now the same as the enum
type. The difference type is its signed counterpart.</li>

<li>Enabled more warnings in clang if available, namely <code>-Wundef</code>,
<code>-Wimplicit-fallthrough</code>, <code>-Wunneeded-member-function</code>,
<code>-Wunused-member-function</code>,
<code>-Wconditional-uninitialized</code>,
<code>-Wunreachable-code</code>.</li>

<li>Updates for doxygen-1.8.1</li>

<li>Updates for boost-1.50</li>

<li>Made fcppt <code>-Wunused-local-typedefs</code>-proof.</li>

</ul>

\section changes_changes_to_011 Changes from 0.10 to 0.11

\subsection changaes_general_to_011 General changes

<ul>

<li>Introduced new headers <code>fcppt/config/external_begin.hpp</code> and
<code>fcppt/config/external_end.hpp</code> that are used around external
includes and disable a lot of warnings. This way it was possible for us to
enable many more warnings for fcppt, especially in VC++.</li>

<li>Removed convenience headers that included everything in a subsystem. They
are not considered good style anyway.</li>

<li>Removed trailing whitespaces in the code.</li>

<li>Don't use constants with internal linkage anymore.</li>

<li>Parts of fcppt that require additional libraries to link to are now split
into their own libraries, namely <code>fcppt_filesystem</code> and
<code>fcppt_thread</code>.</li>

</ul>

\subsection changes_added_functionality_to_011 Added functionality

\subsubsection changes_new_libraries_to_011 New Libraries

<ul>

<li>Added a new \ref fcpptassert "assert" framework</li>

<li>Added fcppt::null_ptr which can be used for null pointers to objects.</li>

</ul>

\subsubsection changes_additions_to_libraries_to_011 Additions to existing libraries

<ul>

<li>\ref fcpptalgorithm
	<ul>

	<li>Added fcppt::algorithm::key_set</li>

	<li>Added fcppt::algorithm::set_union</li>

	<li>Added fcppt::algorithm::copy_if</li>

	</ul>
</li>

<li>\ref fcpptcontainer
	<ul>

	<li>Added fcppt::container::grid::iterator_position</li>

	<li>Added fcppt::container::grid::is_square</li>

	<li>Added fcppt::container::grid::interpolate</li>

	</ul>
</li>

<li>\ref fcpptexport
	<ul>

	<li>Added support for explicit instantiations of template functions and
	classes.</li>

	</ul>
</li>

<li>\ref fcpptmath
	<ul>

	<li>Added fcppt::math::vector::mod</li>

	<li>Added componentwise_equal functions to replace the removed
	implicit epsilon comparison.</li>

	</ul>
</li>

<li>\ref fcpptio
	<ul>

	<li>Added fcppt::io::read_exn</li>

	</ul>
</li>

<li>\ref fcpptlog
	<ul>

	<li>The log library has been redesigned, see \ref
	changes_changed_functionality_to_011</li>

	<li>Added fcppt::log::format::time_stamp</li>

	</ul>
</li>

<li><code>fcpptmpl</code>
	<ul>

	<li>Added <code>fcppt::mpl::contains_if</code>.</li>

	<li>Added <code>fcppt::mpl::integral_cast</code>.</li>

	</ul>
</li>

<li>\ref fcpptoptional
	<ul>

	<li>Support optional references.</li>

	<li>Added fcppt::dynamic_optional_cast, fcppt::static_optional_cast and
	fcppt::const_optional_cast to cast between optional references.</li>

	</ul>
</li>

<li>\ref fcpptstrongtypedef
	<ul>

	<li>Added fcppt::strong_typedef_construct_cast</li>

	</ul>
</li>

<li>\ref fcppttypetraits
	<ul>

	<li>Added fcppt::type_traits::is_random_access_iterator,
	fcppt::type_traits::is_bidirectional_iterator,
	fcppt::type_traits::is_forward_iterator,
	fcppt::type_traits::is_input_iterator and
	fcppt::type_traits::is_output_iterator.</li>

	</ul>
</li>

<li>\ref fcpptvariant
	<ul>

	<li>Added a free fcppt::variant::get function.</li>

	<li>Added nonconst variant visitation using fcppt::ref</li>

	</ul>
</li>

<li>\ref fcpptvarious
	<ul>

	<li>Added FCPPT_FOREACH_ENUMERATOR_START_END </li>

	</ul>
</li>

</ul>

\subsection changes_changed_functionality_to_011 Changed functionality

<ul>

<li>Renamed every template named <code>basic</code> to
<code>object</code>.</li>

<li>\ref fcpptcasts
	<ul>

	<li>fcppt::sn_cast has been renamed to fcppt::safe_numeric_cast. Also,
	it has been changed to forbid any conversions that can lead to data
	loss.</li>

	<li>fcppt::truncation_check_cast has been improved.</li>

	</ul>
</li>

<li>\ref fcpptcontainer
	<ul>

	<li>fcppt::container::bitfield::object's constructor is now
	explicit.</li>

	</ul>
</li>

<li>\ref fcpptendianness
	<ul>

	<li>fcppt::endianness has been reworked. Most of the functions have
	been replaced by fcppt::endianness::convert, see \ref
	changes_removed_functionality_to_011 </li>

	</ul>
</li>

<li>\ref fcpptfilesystem
	<ul>

	<li>fcppt::filesystem now uses the boost types directly, because only
	<code>boost filesystem v3</code> is supported now. Also, a lot of now
	unnecessary functions have been removed, see \ref
	changes_removed_functionality_to_011 </li>

	</ul>
</li>

<li>\ref fcpptio
	<ul>

	<li>fcppt::io::read now returns an optional.</li>

	</ul>
</li>

<li>\ref fcpptmath
	<ul>

	<li>Renamed fcppt::math::vector::signed_angle to
	fcppt::math::vector::signed_angle_between.</li>

	<li>Renamed fcppt::math::next_pow_2 to
	fcppt::math::next_power_of_2.</li>

	<li>Renamed fcppt::math::vector::signed_angle_cast to
	fcppt::math::vector::signed_angle_between_cast.</li>

	<li>Renamed <code>fcppt/math/log.hpp</code> to
	<code>fcppt/math/log2.hpp</code></li>

	<li>Split fcppt::math::box::stretch into
	fcppt::math::box::stretch_absolute and
	fcppt::math::box::stretch_relative</li>

	</ul>
</li>

<li>\ref fcpptlog
	<ul>

	<li>Redesigned the logger library that makes it possible to declare
	global loggers and enable and disable them at runtime easily.</li>

	<li>Formatters are now functions instead of classes.</li>

	<li>Renamed fcppt::log::parameters::all to
	fcppt::log::parameters::object.</li>

	</ul>
</li>

<li>\ref fcpptoptional
	<ul>

	<li>The constructor of optionals is now explicit.</li>

	</ul>
</li>

<li>\ref fcpptrandom
	<ul>

	<li>fcppt::random has been completely redesigned. Is is now a wrapper
	around <code>boost.random</code> that forbids copying of generators and
	disables all default parameters.</li>

	</ul>
</li>

<li>\ref fcpptsmartptr
	<ul>

	<li>The deleters are no longer template-template parameters. Instead,
	they are normal template parameters now.</li>

	</ul>
</li>

<li>\ref fcpptstring
	<ul>

	<li>fcppt::io::cout, etc. are now functions to prevent global
	initialization problems.</li>

	<li>Use the standard locale <code>std::locale("")</code> for the
	converting string functions by default.</li>

	</ul>
</li>

<li>\ref fcpptstrongtypedef
	<ul>

	<li>Improved the type safety of the constructors, which now use
	fcppt::safe_cast</li>

	<li>Support references in strong typedefs.</li>

	<li>Removed the default constructor.</li>

	</ul>
</li>

<li>\ref fcpptvariant
	<ul>

	<li>Variants can no longer be empty. A default constructor is no longer
	provided.</li>

	</ul>
</li>

<li>\ref fcpptvarious
	<ul>

	<li>Made fcppt::type_info constructor explicit.</li>

	<li> fcppt::type_name now gets a <code>std::type_info</code> instead of
	an fcppt::type_info.</li>

	</ul>
</li>

</ul>

\subsection changes_removed_functionality_to_011 Removed functionality

\subsubsection changes_removed_libraries_to_011 Removed libraries

<ul>

<li>Removed fcppt::utf8. It is not really implementable without OS
support.</li>

<li>Removed fcppt::chrono, expect the asio glue code. <code>boost.chrono</code>
should be used.</li>

</ul>

\subsubsection changes_removed_from_libraries_to_011 Removed functionality from libraries

<ul>

<li>Removed fcppt::auto_ptr typedef</li>

<li>Removed FCPPT_ASSERT and FCPPT_ASSERT_MESSAGE, which were replaced by the
new \ref fcpptassert "assert" framework</li>

<li>Removed FCPPT_STUB_FUNCTION</li>

<li>Removed fcppt::minmax_pair</li>

<li>\ref fcpptendianness
	<ul>

	<li>Removed fcppt::endianness::copy_n_from_host,
	fcppt::endianness::copy_n_to_host, fcppt::endianness::copy_n_swapped
	and fcppt::endianness::copy_swapped,
	fcppt::endianness::from_big_endian, fcppt::endianness::from_host,
	fcppt::endianness::from_little_endian,
	fcppt::endianness::to_big_endian, fcppt::endianness::to_host and
	fcppt::endianness::to_little_endian.</li>

	</ul>
</li>

<li>\ref fcpptfilesystem
	<ul>

	<li>Removed fcppt::filesystem::first_file, fcppt::filesystem::next_file
	and fcppt::filesystem::skip_directories.</li>

	<li>Removed fcppt::filesystem::create_directories_recursive,
	fcppt::filesystem::create_directory, fcppt::filesystem::current_path,
	fcppt::filesystem::directory_iterator, fcppt::filesystem::exists,
	fcppt::filesystem::file_size, fcppt::filesystem::is_directory,
	fcppt::filesystem::is_regular, fcppt::filesystem::path,
	fcppt::filesystem::readlink,
	fcppt::filesystem::recursive_directory_iterator,
	fcppt::filesystem::remove and fcppt::filesystem::remove_filename</li>

	<li>Removed fcppt::io::cifstream, fcppt::io::cofstream and
	fcppt::io::cfstream</li>

	</ul>
</li>

<li>\ref fcpptmath
	<ul>

	<li>Removed fcppt::math::almost_zero, fcppt;:math::compare,
	fcppt::math::machine_epsilon, fcppt::math::vector::is_null,
	fcppt::math::null and all other epsilon comparing functions. A general
	epsilon cannot be provided and the user must choose one. As a result of
	this, all comparison functions use <code>==</code>. It is made sure
	that they still emit warnings when using
	<code>-Wfloat-equal</code>.</li>

	<li>Removed fcppt::math::vector::to_angle,
	fcppt::math::vector::transform, fcppt::math::vector::unit_circle and
	fcppt::math::vector::place.</li>

	<li>Removed fcppt::math::dim::quad and
	fcppt::math::dim::transform.</li>

	<li>Removed FCPPT_MATH_INSTANTIATE_ARITHMETIC,
	fcppt::math::is_negative, fcppt::math::round_div_int, fcppt::math::quad,
	fcppt::math::inverse and fcppt::math::signum.</li>

	<li>Removed fcppt::math::matrix::look_at</li>

	<li>Removed broken overloads of fcppt::math::next_pow_2</li>

	</ul>
</li>

<li>\ref fcpptsmartptr
	<ul>

	<li>fcppt::unique_ptr doesn't store its deleter anymore.</li>

	</ul>
</li>

<li>\ref fcpptstring
	<ul>

	<li>Removed fcppt::lexical_cast which was replaced by
	fcppt::extract_from_string and fcppt::insert_to_string</li>

	</ul>
</li>

<li>\ref fcpptstrongtypedef
	<ul>

	<li>Removed the nonconst getter from fcppt::strong_typedef</li>

	</ul>
</li>

<li>\ref fcpptvariant
	<ul>

	<li>Removed fcppt::variant::apply, use fcppt::variant::apply_unary,
	fcppt::variant::apply_binary or fcppt::variant::apply_ternary
	instead.</li>

	</ul>
</li>

</ul>

\subsection changes_bugfixes_to_011 Bugfixes

<ul>

<li>Fixed <code>fcppt::mpl::index_of</code> to only allow types that are part of the
sequence. This also fixes invalid uses of fcppt::variant::object::get </li>

<li>Fixed fcppt::variant::holds_type when recursive types are involved.</li>

<li>Don't overwrite <code>Boost_ADDITIONAL_VERSIONS</code> in cmake, just
append to it.</li>

<li>Fixed fcppt::algorithm::ptr_container_erase</li>

<li>Fixed the iterator category of fcppt::cyclic_iterator</li>

<li>Fixed static linking of fcppt</li>

<li>Fixed fcppt::math::box::contains_point</li>

<li>Made logging a lot less expensive</li>

<li>fcppt::variant::apply_unary now has linear complexity instead of quadratic
complexity if the variant has been declared using an
<code>boost::mpl::list</code></li>

</ul>

\section changes_changes_to_010 Changes from 0.9 to 0.10

\subsection changes_added_functionality_to_010 Added functionality

<ul>
	<li>Added <code>math::matrix::is_matrix</code> trait.</li>
	<li>Added <code>io::stream_to_string</code> that reads the whole content of a stream into a string.</li>
	<li>Added <code>filesystem::create_directory_exn</code> and <code>filesystem::create_directories_recursive_exn</code>.</li>
	<li>Added <code>backtrace</code> which can print a stack trace for gcc compiled binaries.</li>
	<li>Install a new <code>FcpptConfig.cmake</code> file so cmake can find an installed fcppt without <code>FindFcppt.cmake</code>.</li>
	<li>Added fusion adaptors for <code>container::array</code>.</li>
	<li>Added <code>utf8::from_std_string</code>.</li>
	<li>Implemented <code>FCPPT_PP_FUNCTION</code> for VC++.</li>
	<li>Added support for <code>boost::array</code> to <code>assign::array</code>.</li>
	<li>Added <code>container::ptr::push_front_unique_ptr</code>.</li>
	<li><code>-fvibisibility=hidden</code> is now optional, but still on by default (use <code>FCPPT_ENABLE_VISIBILITY_HIDDEN</code>).</li>
	<li>Added <code>mpl::append</code>.</li>
</ul>

\subsection changes_changed_functionality_to_010 Changed functionality

<ul>
	<li>Changed the default cmake module installation path to
	<code>${CMAKE_ROOT}/Modules</code> if <code>${CMAKE_INSTALL_PREFIX}</code> is a
	prefix of <code>${CMAKE_ROOT}</code>.</li>
	<li>Replaced <code>utf8::convert</code> by <code>utf8::from_fcppt_string</code>
	and <code>utf8::to_fcppt_string</code>.</li>
	<li>random now uses <code>boost::random</code> instead of
	<code>tr1::random</code>.</li>
	<li>A 64 bit type is now required for chrono.</li>
</ul>

\subsection changes_removed_functionality_to_010 Removed functionality

<ul>
	<li>Removed boost filesystem v2 support. Boost 1.44 or later is now needed.</li>
	<li>Removed <code>math::matrix::perspective</code>,
	<code>math::matrix::orthogonal</code> and
	<code>math::matrix::orthogonal_xy</code>. Every projection function is only
	meaningful if you know which canonical view volume you are using.<li>
</ul>

\subsection changes_bugfixes_to_010 Bugfixes

<ul>
	<li>Fixed <code>FCPPT_DYN_LINK</code> behaviour in
	<code>FindFcppt.cmake</code>.</li>
	<li>Properly pass <code>QUIETLY</code> and <code>REQUIRED</code> in
	<code>FindFcppt.cmake</code>.</li>
	<li>Include <code>Boost_INCLUDE_DIRS</code> rather than
	<code>Boost_INCLUDE_DIR</code>.</li>
	<li>Use <code>-pthread</code> for POSIX systems because we use
	boost.thread and asio.</li>
	<li>Assert that a type requested via <code>variant::object::get</code>
	or <code>\verbatim ::get_raw \endverbatim</code> is actually among its possible types.</li>
	<li><code>type_traits::is_iterable</code>,
	<code>TYPE_TRAITS_GENERATE_HAS_MEMBER_FUNCTION</code> and
	<code>TYPE_TRAITS_GENERATE_HAS_TYPE</code> now properly expose an
	<code>mpl::bool</code>.</li>
	<li>The default case of <code>chrono::common_type</code> has been
	restricted to fundamental types to avoid compiler errors with certain
	overloaded operators.</li>
</ul>
*/
